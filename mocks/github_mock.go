// Code generated by MockGen. DO NOT EDIT.
// Source: internal/github/interface.go
//
// Generated by this command:
//
//	mockgen --source=internal/github/interface.go --destination=mocks/github_mock.go --package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	github "github.com/exitflynn/codesync/internal/github"
	gomock "go.uber.org/mock/gomock"
)

// MockGitHubClient is a mock of GitHubClient interface.
type MockGitHubClient struct {
	ctrl     *gomock.Controller
	recorder *MockGitHubClientMockRecorder
	isgomock struct{}
}

// MockGitHubClientMockRecorder is the mock recorder for MockGitHubClient.
type MockGitHubClientMockRecorder struct {
	mock *MockGitHubClient
}

// NewMockGitHubClient creates a new mock instance.
func NewMockGitHubClient(ctrl *gomock.Controller) *MockGitHubClient {
	mock := &MockGitHubClient{ctrl: ctrl}
	mock.recorder = &MockGitHubClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitHubClient) EXPECT() *MockGitHubClientMockRecorder {
	return m.recorder
}

// ExtractFunction mocks base method.
func (m *MockGitHubClient) ExtractFunction(content, language, functionName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractFunction", content, language, functionName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtractFunction indicates an expected call of ExtractFunction.
func (mr *MockGitHubClientMockRecorder) ExtractFunction(content, language, functionName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractFunction", reflect.TypeOf((*MockGitHubClient)(nil).ExtractFunction), content, language, functionName)
}

// GetCommitsSince mocks base method.
func (m *MockGitHubClient) GetCommitsSince(owner, repo, path string, since time.Time, until string) ([]github.Commit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommitsSince", owner, repo, path, since, until)
	ret0, _ := ret[0].([]github.Commit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommitsSince indicates an expected call of GetCommitsSince.
func (mr *MockGitHubClientMockRecorder) GetCommitsSince(owner, repo, path, since, until any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommitsSince", reflect.TypeOf((*MockGitHubClient)(nil).GetCommitsSince), owner, repo, path, since, until)
}

// GetFile mocks base method.
func (m *MockGitHubClient) GetFile(owner, repo, path, revision string) (*github.FileContent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFile", owner, repo, path, revision)
	ret0, _ := ret[0].(*github.FileContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFile indicates an expected call of GetFile.
func (mr *MockGitHubClientMockRecorder) GetFile(owner, repo, path, revision any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFile", reflect.TypeOf((*MockGitHubClient)(nil).GetFile), owner, repo, path, revision)
}
